/*
 *  Author: bwilliams
 *  Created: April 6, 2012
 *
 *  Copyright (c) 2012 Vmware, Inc.  All rights reserved.
 *  -- VMware Confidential
 *
 *  This code was generated by the script "build/dev/codeGen/genCppDoc". Please
 *  speak to Brian W. before modifying it by hand.
 *
 */

#ifndef CRequestHeaderDoc_h_
#define CRequestHeaderDoc_h_

namespace Caf {

/// A simple container for objects of type RequestHeader
class CRequestHeaderDoc {
public:
	CRequestHeaderDoc() :
		_isInitialized(false),
		_sessionId(CAFCOMMON_GUID_NULL) {}
	virtual ~CRequestHeaderDoc() {}

public:
	/// Initializes the object with everything required by this
	/// container. Once initialized, this object cannot
	/// be changed (i.e. it is immutable).
	void initialize(
		const SmartPtrCRequestConfigDoc requestConfig,
		const SmartPtrCAuthnAuthzCollectionDoc authnAuthzCollection = SmartPtrCAuthnAuthzCollectionDoc(),
		const SmartPtrCProtocolCollectionDoc protocolCollection = SmartPtrCProtocolCollectionDoc(),
		const SmartPtrCPropertyCollectionDoc echoPropertyBag = SmartPtrCPropertyCollectionDoc(),
		const std::string version = "1.0",
		const std::string createdDateTime = CDateTimeUtils::getCurrentDateTime(),
		const UUID sessionId = CAFCOMMON_GUID_NULL) {
		if (! _isInitialized) {
			_requestConfig = requestConfig;
			_authnAuthzCollection = authnAuthzCollection;
			_protocolCollection = protocolCollection;
			_echoPropertyBag = echoPropertyBag;
			_version = version;
			_createdDateTime = createdDateTime;
			_sessionId = sessionId;

			_isInitialized = true;
		}
	}

public:
	/// Accessor for the RequestConfig
	SmartPtrCRequestConfigDoc getRequestConfig() const {
		return _requestConfig;
	}

	/// Accessor for the Authentication / Authorization Collection
	SmartPtrCAuthnAuthzCollectionDoc getAuthnAuthzCollection() const {
		return _authnAuthzCollection;
	}

	/// Accessor for the Protocol Collection
	SmartPtrCProtocolCollectionDoc getProtocolCollection() const {
		return _protocolCollection;
	}

	/// Accessor for the EchoPropertyBag
	SmartPtrCPropertyCollectionDoc getEchoPropertyBag() const {
		return _echoPropertyBag;
	}

	/// Accessor for the version
	std::string getVersion() const {
		return _version;
	}

	/// Accessor for the date/time when the request was created
	std::string getCreatedDateTime() const {
		return _createdDateTime;
	}

	/// Accessor for the session ID
	UUID getSessionId() const {
		return _sessionId;
	}

private:
	bool _isInitialized;

	SmartPtrCRequestConfigDoc _requestConfig;
	SmartPtrCAuthnAuthzCollectionDoc _authnAuthzCollection;
	SmartPtrCProtocolCollectionDoc _protocolCollection;
	SmartPtrCPropertyCollectionDoc _echoPropertyBag;
	std::string _version;
	std::string _createdDateTime;
	UUID _sessionId;

private:
	CAF_CM_DECLARE_NOCOPY(CRequestHeaderDoc);
};

CAF_DECLARE_SMART_POINTER(CRequestHeaderDoc);

}

#endif
