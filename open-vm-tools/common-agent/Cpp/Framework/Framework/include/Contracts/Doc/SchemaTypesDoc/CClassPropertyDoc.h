/*
 *  Author: bwilliams
 *  Created: April 6, 2012
 *
 *  Copyright (c) 2012 Vmware, Inc.  All rights reserved.
 *  -- VMware Confidential
 *
 *  This code was generated by the script "build/dev/codeGen/genCppDoc". Please
 *  speak to Brian W. before modifying it by hand.
 *
 */

#ifndef CClassPropertyDoc_h_
#define CClassPropertyDoc_h_

namespace Caf {

/// Definition of an attribute (field) of a class
class CClassPropertyDoc {
public:
	CClassPropertyDoc() :
		_type(PROPERTY_NONE),
		_required(false),
		_key(false),
		_list(false),
		_caseSensitive(false),
		_transientVal(false),
		_validator(VALIDATOR_NONE),
		_isInitialized(false) {}
	virtual ~CClassPropertyDoc() {}

public:
	/// Initializes the object with everything required by this
	/// container. Once initialized, this object cannot
	/// be changed (i.e. it is immutable).
	void initialize(
		const std::string name,
		const PROPERTY_TYPE type,
		const std::deque<std::string> value,
		const bool required = false,
		const bool key = false,
		const bool list = false,
		const bool caseSensitive = false,
		const bool transientVal = false,
		const std::string defaultVal = std::string(),
		const VALIDATOR_TYPE validator = VALIDATOR_NONE,
		const std::string upperRange = std::string(),
		const std::string lowerRange = std::string(),
		const std::string displayName = std::string(),
		const std::string description = std::string()) {
		if (! _isInitialized) {
			_name = name;
			_type = type;
			_value = value;
			_required = required;
			_key = key;
			_list = list;
			_caseSensitive = caseSensitive;
			_transientVal = transientVal;
			_defaultVal = defaultVal;
			_validator = validator;
			_upperRange = upperRange;
			_lowerRange = lowerRange;
			_displayName = displayName;
			_description = description;

			_isInitialized = true;
		}
	}

public:
	/// Property name
	std::string getName() const {
		return _name;
	}

	/// Describes the data type of the property
	PROPERTY_TYPE getType() const {
		return _type;
	}

	/// The contents of a validator used on this property
	std::deque<std::string> getValue() const {
		return _value;
	}

	/// Whether this is a required property, i.e. this property must always be non-empty
	bool getRequired() const {
		return _required;
	}

	/// Indicates this property may be used as a key identifying field
	bool getKey() const {
		return _key;
	}

	/// Indicates whether to expect a list of properties in the provider response
	bool getList() const {
		return _list;
	}

	/// Indicates whether a string field should be treated in a case-sensitive manner
	bool getCaseSensitive() const {
		return _caseSensitive;
	}

	/// Accessor for the TransientVal
	bool getTransientVal() const {
		return _transientVal;
	}

	/// Accessor for the DefaultVal
	std::string getDefaultVal() const {
		return _defaultVal;
	}

	/// The type of validator described in the 'value' sub-elements
	VALIDATOR_TYPE getValidator() const {
		return _validator;
	}

	/// If a 'range' validator is in use, this describes the upper limit of allowable values for the property. QUESTIONABLE: how do we determine inclusive or exclusive range
	std::string getUpperRange() const {
		return _upperRange;
	}

	/// If a 'range' validator is in use, this describes the lower limit of allowable values for the property. QUESTIONABLE: how do we determine inclusive or exclusive range
	std::string getLowerRange() const {
		return _lowerRange;
	}

	/// A hint as to what this property should be called when displaying it to a human
	std::string getDisplayName() const {
		return _displayName;
	}

	/// A phrase to describe the property for mouse-over text, etc
	std::string getDescription() const {
		return _description;
	}

private:
	std::string _name;
	PROPERTY_TYPE _type;
	std::deque<std::string> _value;
	bool _required;
	bool _key;
	bool _list;
	bool _caseSensitive;
	bool _transientVal;
	std::string _defaultVal;
	VALIDATOR_TYPE _validator;
	std::string _upperRange;
	std::string _lowerRange;
	std::string _displayName;
	std::string _description;
	bool _isInitialized;

private:
	CAF_CM_DECLARE_NOCOPY(CClassPropertyDoc);
};

CAF_DECLARE_SMART_POINTER(CClassPropertyDoc);

}

#endif
