/*
 *  Author: bwilliams
 *  Created: April 6, 2012
 *
 *  Copyright (c) 2012 Vmware, Inc.  All rights reserved.
 *  -- VMware Confidential
 *
 *  This code was generated by the script "build/dev/codeGen/genCppDoc". Please
 *  speak to Brian W. before modifying it by hand.
 *
 */

#ifndef CMultiPmeMgmtRequestDoc_h_
#define CMultiPmeMgmtRequestDoc_h_

namespace Caf {

/// A simple container for objects of type MultiPmeMgmtRequest
class CMultiPmeMgmtRequestDoc {
public:
	CMultiPmeMgmtRequestDoc() :
		_clientId(CAFCOMMON_GUID_NULL),
		_requestId(CAFCOMMON_GUID_NULL),
		_isInitialized(false) {}
	virtual ~CMultiPmeMgmtRequestDoc() {}

public:
	/// Initializes the object with everything required by this
	/// container. Once initialized, this object cannot
	/// be changed (i.e. it is immutable).
	void initialize(
		const UUID clientId,
		const UUID requestId,
		const SmartPtrCRequestHeaderDoc requestHeader,
		const SmartPtrCMultiPmeMgmtBatchCollectionDoc multiPmeBatchCollection) {
		if (! _isInitialized) {
			_clientId = clientId;
			_requestId = requestId;
			_requestHeader = requestHeader;
			_multiPmeBatchCollection = multiPmeBatchCollection;

			_isInitialized = true;
		}
	}

public:
	/// Accessor for the ClientId
	UUID getClientId() const {
		return _clientId;
	}

	/// Accessor for the RequestId
	UUID getRequestId() const {
		return _requestId;
	}

	/// Accessor for the RequestHeader
	SmartPtrCRequestHeaderDoc getRequestHeader() const {
		return _requestHeader;
	}

	/// Accessor for the MultiPmeBatchCollection
	SmartPtrCMultiPmeMgmtBatchCollectionDoc getMultiPmeBatchCollection() const {
		return _multiPmeBatchCollection;
	}

private:
	UUID _clientId;
	UUID _requestId;
	SmartPtrCRequestHeaderDoc _requestHeader;
	SmartPtrCMultiPmeMgmtBatchCollectionDoc _multiPmeBatchCollection;
	bool _isInitialized;

private:
	CAF_CM_DECLARE_NOCOPY(CMultiPmeMgmtRequestDoc);
};

CAF_DECLARE_SMART_POINTER(CMultiPmeMgmtRequestDoc);

}

#endif
