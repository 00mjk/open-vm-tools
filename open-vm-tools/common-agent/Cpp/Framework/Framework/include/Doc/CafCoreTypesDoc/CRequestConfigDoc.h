/*
 *  Author: bwilliams
 *  Created: April 6, 2012
 *
 *  Copyright (c) 2012 Vmware, Inc.  All rights reserved.
 *  -- VMware Confidential
 *
 *  This code was generated by the script "build/dev/codeGen/genCppDoc". Please
 *  speak to Brian W. before modifying it by hand.
 *
 */

#ifndef CRequestConfigDoc_h_
#define CRequestConfigDoc_h_

namespace Caf {

/// A simple container for objects of type RequestConfig
class CRequestConfigDoc {
public:
	CRequestConfigDoc() :
		_isInitialized(false) {}
	virtual ~CRequestConfigDoc() {}

public:
	/// Initializes the object with everything required by this
	/// container. Once initialized, this object cannot
	/// be changed (i.e. it is immutable).
	void initialize(
		const std::string responseFormatType,
		const SmartPtrCAddInsDoc requestProcessorAddIns = SmartPtrCAddInsDoc(),
		const SmartPtrCAddInsDoc responseProcessorAddIns = SmartPtrCAddInsDoc(),
		const SmartPtrCLoggingLevelCollectionDoc loggingLevelCollection = SmartPtrCLoggingLevelCollectionDoc()) {
		if (! _isInitialized) {
			_responseFormatType = responseFormatType;
			_requestProcessorAddIns = requestProcessorAddIns;
			_responseProcessorAddIns = responseProcessorAddIns;
			_loggingLevelCollection = loggingLevelCollection;

			_isInitialized = true;
		}
	}

public:
	/// Accessor for the ResponseFormatType
	std::string getResponseFormatType() const {
		return _responseFormatType;
	}

	/// Accessor for the RequestProcessorAddIns
	SmartPtrCAddInsDoc getRequestProcessorAddIns() const {
		return _requestProcessorAddIns;
	}

	/// Accessor for the ResponseProcessorAddIns
	SmartPtrCAddInsDoc getResponseProcessorAddIns() const {
		return _responseProcessorAddIns;
	}

	/// Accessor for the LoggingLevelCollection
	SmartPtrCLoggingLevelCollectionDoc getLoggingLevelCollection() const {
		return _loggingLevelCollection;
	}

private:
	bool _isInitialized;

	std::string _responseFormatType;
	SmartPtrCAddInsDoc _requestProcessorAddIns;
	SmartPtrCAddInsDoc _responseProcessorAddIns;
	SmartPtrCLoggingLevelCollectionDoc _loggingLevelCollection;

private:
	CAF_CM_DECLARE_NOCOPY(CRequestConfigDoc);
};

CAF_DECLARE_SMART_POINTER(CRequestConfigDoc);

}

#endif
