/*
 *  Author: bwilliams
 *  Created: April 6, 2012
 *
 *  Copyright (c) 2012 Vmware, Inc.  All rights reserved.
 *  -- VMware Confidential
 *
 *  This code was generated by the script "build/dev/codeGen/genCppDoc". Please
 *  speak to Brian W. before modifying it by hand.
 *
 */

#ifndef CDataClassDoc_h_
#define CDataClassDoc_h_

namespace Caf {

/// Definition of a data class that may be generated by the provider
class CDataClassDoc {
public:
	CDataClassDoc() :
		_unique(false),
		_transientVal(false),
		_isInitialized(false) {}
	virtual ~CDataClassDoc() {}

public:
	/// Initializes the object with everything required by this
	/// container. Once initialized, this object cannot
	/// be changed (i.e. it is immutable).
	void initialize(
		const std::string namespaceVal,
		const std::string name,
		const std::string version,
		const std::deque<SmartPtrCClassPropertyDoc> propertyCollection = std::deque<SmartPtrCClassPropertyDoc>(),
		const std::deque<SmartPtrCClassInstancePropertyDoc> instancePropertyCollection = std::deque<SmartPtrCClassInstancePropertyDoc>(),
		const bool unique = false,
		const bool transientVal = false,
		const std::string displayName = std::string(),
		const std::string description = std::string()) {
		if (! _isInitialized) {
			_namespaceVal = namespaceVal;
			_name = name;
			_version = version;
			_propertyCollection = propertyCollection;
			_instancePropertyCollection = instancePropertyCollection;
			_unique = unique;
			_transientVal = transientVal;
			_displayName = displayName;
			_description = description;

			_isInitialized = true;
		}
	}

public:
	/// Accessor for the NamespaceVal
	std::string getNamespaceVal() const {
		return _namespaceVal;
	}

	/// Accessor for the Name
	std::string getName() const {
		return _name;
	}

	/// Accessor for the Version
	std::string getVersion() const {
		return _version;
	}

	/// Accessor for the Property
	std::deque<SmartPtrCClassPropertyDoc> getPropertyCollection() const {
		return _propertyCollection;
	}

	/// Accessor for the InstanceProperty
	std::deque<SmartPtrCClassInstancePropertyDoc> getInstancePropertyCollection() const {
		return _instancePropertyCollection;
	}

	/// Indicates whether the key properties of this class are enough to guarantee uniqueness from other classes of the same type
	bool getUnique() const {
		return _unique;
	}

	/// Accessor for the TransientVal
	bool getTransientVal() const {
		return _transientVal;
	}

	/// A hint as to what this class should be called when displaying it to a human
	std::string getDisplayName() const {
		return _displayName;
	}

	/// A phrase to describe the class for mouse-over text, etc
	std::string getDescription() const {
		return _description;
	}

private:
	std::string _namespaceVal;
	std::string _name;
	std::string _version;
	std::deque<SmartPtrCClassPropertyDoc> _propertyCollection;
	std::deque<SmartPtrCClassInstancePropertyDoc> _instancePropertyCollection;
	bool _unique;
	bool _transientVal;
	std::string _displayName;
	std::string _description;
	bool _isInitialized;

private:
	CAF_CM_DECLARE_NOCOPY(CDataClassDoc);
};

CAF_DECLARE_SMART_POINTER(CDataClassDoc);

}

#endif
