/*
 *  Author: bwilliams
 *  Created: April 6, 2012
 *
 *  Copyright (c) 2012 Vmware, Inc.  All rights reserved.
 *  -- VMware Confidential
 *
 *  This code was generated by the script "build/dev/codeGen/genCppDoc". Please
 *  speak to Brian W. before modifying it by hand.
 *
 */

#ifndef CInstallProviderJobDoc_h_
#define CInstallProviderJobDoc_h_

namespace Caf {

/// A simple container for objects of type InstallProviderJob
class CInstallProviderJobDoc {
public:
	CInstallProviderJobDoc() :
		_clientId(CAFCOMMON_GUID_NULL),
		_jobId(CAFCOMMON_GUID_NULL),
		_packageOSType(PACKAGE_OS_NONE),
		_isInitialized(false) {}
	virtual ~CInstallProviderJobDoc() {}

public:
	/// Initializes the object with everything required by this
	/// container. Once initialized, this object cannot
	/// be changed (i.e. it is immutable).
	void initialize(
		const UUID clientId,
		const UUID jobId,
		const std::string providerNamespace,
		const std::string providerName,
		const std::string providerVersion,
		const PACKAGE_OS_TYPE packageOSType,
		const std::deque<SmartPtrCFullPackageElemDoc> packageCollection) {
		if (! _isInitialized) {
			_clientId = clientId;
			_jobId = jobId;
			_providerNamespace = providerNamespace;
			_providerName = providerName;
			_providerVersion = providerVersion;
			_packageOSType = packageOSType;
			_packageCollection = packageCollection;

			_isInitialized = true;
		}
	}

public:
	/// Accessor for the ClientId
	UUID getClientId() const {
		return _clientId;
	}

	/// Accessor for the JobId
	UUID getJobId() const {
		return _jobId;
	}

	/// Accessor for the ProviderNamespace
	std::string getProviderNamespace() const {
		return _providerNamespace;
	}

	/// Accessor for the ProviderName
	std::string getProviderName() const {
		return _providerName;
	}

	/// Accessor for the ProviderVersion
	std::string getProviderVersion() const {
		return _providerVersion;
	}

	/// Accessor for the PackageOSType
	PACKAGE_OS_TYPE getPackageOSType() const {
		return _packageOSType;
	}

	/// Accessor for the PackageVal
	std::deque<SmartPtrCFullPackageElemDoc> getPackageCollection() const {
		return _packageCollection;
	}

private:
	UUID _clientId;
	UUID _jobId;
	std::string _providerNamespace;
	std::string _providerName;
	std::string _providerVersion;
	PACKAGE_OS_TYPE _packageOSType;
	std::deque<SmartPtrCFullPackageElemDoc> _packageCollection;
	bool _isInitialized;

private:
	CAF_CM_DECLARE_NOCOPY(CInstallProviderJobDoc);
};

CAF_DECLARE_SMART_POINTER(CInstallProviderJobDoc);

}

#endif
